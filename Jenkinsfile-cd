pipeline{
   
    agent any

    parameters{

        choice(name: 'action', choices: 'create\ndestroy\ndestroyekscluster', description: 'create/update or destroy eks cluster')
        string(name: 'aws_account_id', description: "AWS ACCOUNT ID", defaultValue: '089826821991')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'ap-south-1')
        string(name: 'cluster', description: "name of the EKS Cluster", defaultValue: 'demo-cluster1')
    }

    environment{

        ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
    }
    
    stages{
        
        stage('Git checkout'){

           steps{
             
             script{

                git branch: 'main', url: 'https://github.com/madhavi33/demo-counter-app.git'
             }
                
           } 

        }

        stage('Create EKS Cluster : Terraform'){
            when { expression {  params.action == 'create' } }
            steps{
                script{

                    dir('eks_module') {
                      sh """
                          
                          terraform init 
                          terraform plan -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.Region}' --var-file=./config/terraform.tfvars
                          terraform apply -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' -var 'region=${params.Region}' --var-file=./config/terraform.tfvars --auto-approve
                      """
                  }
                }
            }
        }


        stage('EKS connect'){
           
           steps{

             script{
 
               sh """
                aws configure set aws_access_key_id "$ACCESS_KEY"
                aws configure set aws_secret_access_key "$SECRET_KEY"
                aws configure set region "${params.Region}"
                aws eks --region ${params.Region} update-kubeconfig --name ${params.cluster}
                """
             }
           }

        }

        stage('EKS deployment'){
           when { expression { params.action == 'create'}}
             steps{

               script{

                    def apply = false
                    try{
                        input message: 'please conform the apply to initiate cluster', ok:'ready to apply the config'
                        apply = true
                    }
                    catch(err){
                        apply = false
                        CurrentBuild.result= 'UNSTABLE'
                    }
                    if (apply){
                        sh """

                          kubectl apply -f .

                        """;
                    }
               }


            }
        }

        stage('delete deployments'){

            steps{

                script{

                    def destroy = false

                    try{

                        input message: 'please confirm the destroy to delete deployment', ok: 'ready to destroy config'
                        destroy= true
                    }
                    catch(err){
                        destroy= false
                    }
                    if(destroy){
                        sh """
                           kubectl delete -f .
                           """;
                    }   
                }
            }
        }
    }
}